datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  email                     String?         @unique
  username                  String?         @unique
  lastActiveTimestamp       DateTime        @default(now())
  isAdmin                   Boolean         @default(false)

  paymentProcessorUserId    String?         @unique
  lemonSqueezyCustomerPortalUrl String?     // Can delete if not using Lemon Squeezy.
  checkoutSessionId         String?
  subscriptionStatus        String?         // 'active', 'canceled', etc.
  subscriptionPlan          String?         // 'hobby', 'pro'
  sendNewsletter            Boolean         @default(false)
  datePaid                  DateTime?
  credits                   Int             @default(3)

  gptResponses              GptResponse[]
  contactFormMessages       ContactFormMessage[]
  tasks                     Task[]
  files                     File[]
  sharedFiles               SharedFile[]    @relation("SharedWithUser")
  sharedByFiles             SharedFile[]    @relation("SharedByUser")
  annotations               Annotation[]    // Annotations by this user
  projects                  Project[]       // Projects created by this user
  invitesSent               Invite[]        @relation("SentInvites")
  invitesReceived           Invite[]        @relation("ReceivedInvites")
}



model Project {
  id          String    @id @default(uuid())
  name        String
  createdAt   DateTime  @default(now())
  files       File[]    // Files belonging to this project

  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

model File {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  name                      String
  type                      String          // File type (e.g., PDF, Image)
  key                       String           @unique // Mark the key field as unique
  uploadUrl                 String?
  size                      Int?             // File size in bytes
  folder                    String?         // Folder path if applicable
  shared                    Boolean         @default(false)  // Shared status

  project                   Project?        @relation(fields: [projectId], references: [id])
  projectId                 String?

  annotations               Annotation[]    // Annotations on this file
  sharedWith                SharedFile[]    
  originalSenderEmail       String?  // Email of the user who originally shared the file
}

model SharedFile {
  id          String @id @default(uuid())
  createdAt   DateTime @default(now())

  file        File @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId      String

  sharedBy    User @relation("SharedByUser", fields: [sharedById], references: [id])
  sharedById  String

  sharedWith  User @relation("SharedWithUser", fields: [sharedWithId], references: [id])
  sharedWithId String

   
  
}


model Annotation {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  file                      File            @relation(fields: [fileId], references: [id])
  fileId                    String

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String          // Text or markup of the annotation
  timestamp                 DateTime        @default(now())
}


model Invite {
  id              Int       @id @default(autoincrement())
  senderId        String
  recipientId     String
  status          String    // "pending", "accepted", "declined"
  createdAt       DateTime  @default(now())

  sender          User      @relation("SentInvites", fields: [senderId], references: [id])
  recipient       User      @relation("ReceivedInvites", fields: [recipientId], references: [id])
}


model GptResponse {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String
}

model Task {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  description               String
  time                      String          @default("1")
  isDone                    Boolean         @default(false)
}

model DailyStats {
  id                               Int             @id @default(autoincrement())
  date                             DateTime        @default(now()) @unique

  totalViews                       Int             @default(0)
  prevDayViewsChangePercent        String          @default("0")
  userCount                        Int             @default(0)
  paidUserCount                    Int             @default(0)
  userDelta                        Int             @default(0)
  paidUserDelta                    Int             @default(0)
  totalRevenue                     Float           @default(0)
  totalProfit                      Float           @default(0)

  sources                          PageViewSource[]
}

model PageViewSource {
  @@id([date, name])
  name                     String
  date                     DateTime        @default(now())

  dailyStats               DailyStats?     @relation(fields: [dailyStatsId], references: [id])
  dailyStatsId             Int?

  visitors                 Int
}

model Logs {
  id                       Int             @id @default(autoincrement())
  createdAt                DateTime        @default(now())

  message                  String
  level                    String
}

model ContactFormMessage {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String
  isRead                    Boolean         @default(false)
  repliedAt                 DateTime?
}
